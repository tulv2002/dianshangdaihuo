# ver.0.6 LiveSpuAnalysis

import pandas as pd
import os

# 读取文件
df = pd.read_excel('1月27日 杨洋家货盘2(1).xlsx')

# 1. 按款号分组，计算每个SPU的erp库存总数
spu_stock = df.groupby('款号')['erp库存'].sum().reset_index()

# 2. 按款号和颜色分组，计算每个SPU不同颜色的erp库存总数
spu_color_stock = df.groupby(['款号', '颜色'])['erp库存'].sum().reset_index()

# 3. 按款号、颜色和尺码分组，计算每个SPU对应颜色和尺码的erp库存总数
spu_color_size_stock = df.groupby(['款号', '颜色', '尺码'])['erp库存'].sum().reset_index()

# 定义递增自然数数组 M 和对应的文字列表 N
M = [0, 100, 300, 500, 1000, 2000, 99999]
N = ["0-100", "100-300", "300-500", "500-1000", "1000-2000", "2000-9999"]

# 设定偏离阈值，可根据实际情况调整
deviation_threshold = 0.3

# 定义颜色库存阈值
color_stock_threshold = 50

# 初始化每个库存区间对应的结果列表
interval_results = {n: [] for n in N}

# 遍历每个SPU
for index, row in spu_stock.iterrows():
    spu = row['款号']
    stock = row['erp库存']

    # 根据SPU总库存确定对应的文字描述
    spu_stock_description = None
    for i in range(len(M) - 1):
        if M[i] < stock <= M[i + 1]:
            spu_stock_description = N[i]
            break

    # 如果没有匹配到区间，可根据需求添加默认描述，这里暂时设为 None
    if spu_stock_description is None:
        spu_stock_description = None

    # 分析好卖颜色的货量情况
    color_stock = spu_color_stock[spu_color_stock['款号'] == spu]
    median_color_stock = color_stock['erp库存'].median()

    good_selling_colors = []
    non_good_selling_colors = []
    for _, color_row in color_stock.iterrows():
        color = color_row['颜色']
        color_stock_val = color_row['erp库存']
        if color_stock_val > median_color_stock:
            good_selling_colors.append(color)
        else:
            non_good_selling_colors.append(color)

    # 存储好卖色和不好卖色的详细信息
    good_selling_info = []
    non_good_selling_info = []

    for color in good_selling_colors:
        color_size_stock = spu_color_size_stock[(spu_color_size_stock['款号'] == spu) & (spu_color_size_stock['颜色'] == color)]
        color_total_stock = color_size_stock['erp库存'].sum()
        size_count = len(color_size_stock)
        avg_stock = color_total_stock / size_count

        # 计算每个尺码库存与平均值的偏离程度
        deviations = abs(color_size_stock['erp库存'] - avg_stock) / avg_stock
        is_out_of_stock = any(deviations > deviation_threshold)


        def calculate_size_status(color_size_stock, deviation_threshold):
            # 计算每个尺码库存与平均值的偏离程度
            color_total_stock = color_size_stock['erp库存'].sum()
            size_count = len(color_size_stock)
            avg_stock = color_total_stock / size_count
            deviations = abs(color_size_stock['erp库存'] - avg_stock) / avg_stock
            is_out_of_stock = any(deviations > deviation_threshold)

            size_info = ', '.join([f"{size}: {inventory}" for size, inventory in
                                   zip(color_size_stock['尺码'], color_size_stock['erp库存'])])
            status = "偏码" if is_out_of_stock else "匀码"
            return status, size_info


        # 处理货多色
        good_selling_info = []
        for color in good_selling_colors:
            color_size_stock = spu_color_size_stock[
                (spu_color_size_stock['款号'] == spu) & (spu_color_size_stock['颜色'] == color)]
            status, size_info = calculate_size_status(color_size_stock, deviation_threshold)
            good_selling_info.append(f"{color};{status}[{size_info}]")

        # 处理货少色
        non_good_selling_info = []
        for color in non_good_selling_colors:
            color_size_stock = spu_color_size_stock[
                (spu_color_size_stock['款号'] == spu) & (spu_color_size_stock['颜色'] == color)]
            status, size_info = calculate_size_status(color_size_stock, deviation_threshold)
            non_good_selling_info.append(f"{color};{status}[{size_info}]")

        good_selling_str = '; '.join(good_selling_info)
        non_good_selling_str = '; '.join(non_good_selling_info)

        good_selling_color_status = f"货多色: {good_selling_str}; 货少色: {non_good_selling_str}"

    good_selling_color_status = f"货多色: {good_selling_str}; 货少色: {non_good_selling_str}"

    # 分析整体断码情况
    all_size_stock = spu_color_size_stock[spu_color_size_stock['款号'] == spu]
    all_total_stock = all_size_stock['erp库存'].sum()
    all_size_count = len(all_size_stock)
    all_avg_stock = all_total_stock / all_size_count
    all_deviations = abs(all_size_stock['erp库存'] - all_avg_stock) / all_avg_stock
    all_is_out_of_stock = any(all_deviations > deviation_threshold)

    size_distribution_status = "断码" if all_is_out_of_stock else "匀码"

    analysis = f"{spu_stock_description}; {good_selling_color_status}; {size_distribution_status}"
    result = [spu, stock, analysis]

    # 将结果添加到对应的库存区间列表中
    if spu_stock_description in N:
        interval_results[spu_stock_description].append(result)

# 创建 ExcelWriter 对象，保存原结果
username = os.getlogin()
save_path = fr'C:\Users\{username}\Documents\analysis_result.xlsx'
with pd.ExcelWriter(save_path, engine='openpyxl') as writer:
    # 遍历每个库存区间
    for interval, results in interval_results.items():
        # 创建 DataFrame
        result_df = pd.DataFrame(results, columns=['货号', '库存', '分析结果'])

        # 将 DataFrame 写入对应的工作表
        result_df.to_excel(writer, sheet_name=interval, index=False)

# 清洗数据为一维表
cleaned_data = []
for interval, results in interval_results.items():
    for result in results:
        spu = result[0]
        stock = result[1]
        analysis = result[2]

        # 打印 analysis 内容用于调试
        print(f"analysis: {analysis}")

        # 先拆分出库存区间描述
        parts = analysis.split('; ', 1)
        spu_stock_desc = parts[0]
        remaining = parts[1]

        # 再从剩余部分拆分出整体断码状态
        last_part_index = remaining.rfind('; ')
        color_info = remaining[:last_part_index]
        overall_status = remaining[last_part_index + 2:]

        good_selling_str = color_info.split('; ')[0].replace('货多色: ', '')
        non_good_selling_str = color_info.split('; ')[1].replace('货少色: ', '')

        # 处理货多色信息
        if good_selling_str:
            good_selling_items = good_selling_str.split('; ')
            for item in good_selling_items:
                color, status_size = item.split(';')
                status = status_size.split('[')[0]
                size_info_str = status_size.split('[')[1].replace(']', '')
                sizes = size_info_str.split(', ')
                for size in sizes:
                    size_name, inventory = size.split(': ')
                    cleaned_data.append([spu, stock, spu_stock_desc, '货多色', color, status, size_name, int(inventory),
                                         overall_status])

        # 处理货少色信息
        if non_good_selling_str:
            non_good_selling_items = non_good_selling_str.split('; ')
            for item in non_good_selling_items:
                color, status_size = item.split(';')
                status = status_size.split('[')[0]
                size_info_str = status_size.split('[')[1].replace(']', '')
                sizes = size_info_str.split(', ')
                for size in sizes:
                    size_name, inventory = size.split(': ')
                    cleaned_data.append([spu, stock, spu_stock_desc, '货少色', color, status, size_name, int(inventory),
                                         overall_status])

# 创建一维表的 DataFrame
cleaned_df = pd.DataFrame(cleaned_data,
                          columns=['货号', '库存', '库存区间', '颜色类型', '颜色', '尺码断码状态', '尺码', '库存数量',
                                   '整体断码状态'])

# 保存一维表数据
cleaned_save_path = fr'C:\Users\{username}\Documents\analysis_result_cleaned7.xlsx'
cleaned_df.to_excel(cleaned_save_path, index=False)
